##########################################
#* Queries & Mutations
type Query {
  getSensors: [Sensor]
  getSensor(room: String): Sensor

  getPlugs: [Plug]
  getPlug(name: String): Plug

  getRGBLights: [RGBLight]
  getRGBLight(name: String): RGBLight

  getValves: [Valve]
  getValve(room: String): Valve

  getSetpoints: [Setpoint]
  getSetpoint(room: String): Setpoint

  getComputerAudio: ComputerAudio
}

type Mutation {
  updatePlug(input: PlugInput): Plug

  updateOffset(input: offsetsInput): Sensor

  updateRGBLights(input: RGBLightInput): RGBLight

  updateDeadzone(input: DeadzoneInput): Setpoint
  updateSetpoint(input: SetpointInput): Setpoint
  deleteSetpoint(input: SetpointInput): Setpoint

  updateComputerAudio(input: ComputerAudioInput): ComputerAudio
}

##########################################
#* Inputs
input offsetsInput {
  room: String
  offset: Float
}

input ComputerAudioInput {
  master: Boolean
  left: Boolean
  right: Boolean
  sub: Boolean
  mixer: Boolean
}

input RGBLightInput {
  name: String
  red: Int
  green: Int
  blue: Int
  mode: Int
}

input PlugInput {
  name: String
  state: Boolean
}

input SetpointInput {
  room: String
  day: String
  time: String
  temp: String
  deadZone: String
}

input days {
  weekday: Boolean
  weekend: Boolean
}

input DeadzoneInput {
  room: String
  deadzone: String
}

##########################################
#* Data
type Setpoint {
  room: String
  setpoints: Setpoints
  deadzone: String
}

type Setpoints {
  weekend: entry
  weekday: entry
}

scalar entry
{
  time: String
  temp: Float
}

type Sensor {
  room: String
  rawTemperature: Float
  temperature: Float
  humidity: Float
  offset: Float
  connected: Boolean
  _id: ID
}

type Valve {
  room: String
  state: Boolean
  demand: Boolean
  connected: Boolean
  _id: ID
}

type Plug {
  name: String
  state: Boolean
  connected: Boolean
  _id: ID
}

type RGBLight {
  name: String
  connected: Boolean
  red: Int
  green: Int
  blue: Int
  mode: Int
  _id: ID
}

type ComputerAudio {
  name: String
  left: Boolean
  right: Boolean
  sub: Boolean
  mixer: Boolean
  connected: Boolean
  _id: ID
}
