##########################################
#* Queries & Mutations
type Query {
  getSensors: [Sensor]
  getSensor(room: String): Sensor

  getPlugs: [Plug]
  getPlug(name: String): Plug

  getRGBLights: [RGBLight]
  getRGBLight(name: String): RGBLight

  getComputerAudio: ComputerAudio

  getRooms: [Room]
  getRoom(name: String): Room

  getTimers: [Timer]
  getTimer(name: String): Timer

  getRadiators: [Radiator]
  getRadiator(name: String): Radiator
}

type Mutation {
  updatePlug(input: PlugInput): Plug

  updateOffset(input: offsetsInput): Sensor

  updateRGBLights(input: RGBLightInput): RGBLight

  updateComputerAudio(input: ComputerAudioInput): ComputerAudio

  updateRoom(input: RoomInput): Room
  deleteSetpoint(input: DeleteSetpointInput): Room

  updateTimer(input: TimerInput): Timer

  updateRadiator(input: RadiatorInput): Radiator
}

##########################################
#* Inputs

input RoomInput {
  name: String
  disabled: Boolean
  overrideTime: Float
  overrideType: String
  demand: Int
  deadzone: String
  setpoints: setpointsIn
}

input setpointsIn {
  day: String
  time: String
  temp: String
}

input DeleteSetpointInput {
  name: String
  day: String
  time: String
  temp: String
  deadZone: String
}

input offsetsInput {
  room: String
  offset: Float
}

input ComputerAudioInput {
  master: Boolean
  left: Boolean
  right: Boolean
  sub: Boolean
  mixer: Boolean
}

input RGBLightInput {
  name: String
  red: Int
  green: Int
  blue: Int
  mode: Int
}

input PlugInput {
  name: String
  state: Boolean
}

input days {
  weekday: Boolean
  weekend: Boolean
}

input DeadzoneInput {
  room: String
  deadzone: String
}

input TimerInput {
  name: String
  value: Float
}

input RadiatorInput {
  name: String
  fan: Boolean
  valve: Boolean
}

##########################################
#* Data

type Radiator {
  _id: ID
  name: String
  valve: Boolean
  fan: Boolean
  temperature: Float
  connected: Boolean
}

type Setpoint {
  room: String
  setpoints: Setpoints
  deadzone: String
}

type Timer {
  name: String
  value: Float
}

"""
The room object
"""
type Room {
  """
  The rooms name
  """
  name: String

  """
  The rooms current demand state [On, Off, Maybe]
  """
  demand: Int

  """
  The rooms current override time
  """
  overrideTime: Float

  """
  The rooms override type [On, Off]
  """
  overrideType: String

  """
  Deadzone rooms before the heating turns back on (Â°C)
  """
  deadzone: String

  """
  The rooms schedule setpoints
  """
  setpoints: Setpoints
}

type Setpoints {
  weekend: entry
  weekday: entry
}

scalar entry
{
  time: String
  temp: Float
}

type Sensor {
  room: String
  rawTemperature: Float
  temperature: Float
  humidity: Float
  offset: Float
  connected: Boolean
  _id: ID
}

type Plug {
  name: String
  state: Boolean
  connected: Boolean
  _id: ID
}

type RGBLight {
  name: String
  connected: Boolean
  red: Int
  green: Int
  blue: Int
  mode: Int
  _id: ID
}

type ComputerAudio {
  name: String
  left: Boolean
  right: Boolean
  sub: Boolean
  mixer: Boolean
  connected: Boolean
  _id: ID
}
